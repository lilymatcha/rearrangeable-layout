{"version":3,"sources":["components/DroppableRow.tsx","components/RevisedTile.tsx","components/HorizontalPage.tsx","components/DroppableContainer.tsx","components/Tile.tsx","components/Page.tsx","components/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["components_DroppableRow","_super","DroppableRow","props","call","this","tslib_es6","prototype","render","react","className","children","components_RevisedTile","RevisedTile","style","backgroundColor","color","ROW1","ROW2","components_HorizontalPage","HorizontalPage","_this","onDragEnd","bind","move","reorder","itemsToPutInRow1","itemsToPutInRow2","initialItems","forEach","items","key","console","log","state","itemsInRow1","itemsInRow2","react_beautiful_dnd","display","flexDirection","droppableId","direction","isCombineEnabled","providedDroppable","snapshotDroppable","ref","innerRef","droppableProps","map","item","index","id","draggableId","providedDraggable","snapshotDraggable","draggableProps","dragHandleProps","content","placeholder","result","source","destination","getList","setState","resultFromMove","droppableSource","droppableDestination","sourceClone","slice","destinationClone","removed","splice","list","startIndex","endIndex","components_DroppableContainer","DroppableContainer","grey","components_Tile","Tile","currentPosition","initialPosition","components_Page","Page","tilePositions","getTilePositions","initialTiles","currentTiles","layout","selectedTileKey","undefined","row","i","componentDidMount","updateLayout","moveTile","Number","oldPosition","newPosition","tile","get","delete","displacedTile","displacedPosition","WIDTH","set","updateTilePositionsMap","arr","x","y","this_1","push","String","position","positionToTileMap","Map","components_App","App","tiles","maxWidth","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","react_dom","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.13138938.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Item from './Item';\r\n\r\nimport '../styles/DroppableRow.css';\r\n\r\nexport interface IDroppableRowProps {\r\n    initialItems?: Map<string, Item>\r\n}\r\n\r\nclass DroppableRow extends React.Component<IDroppableRowProps, object> {\r\n    constructor(props: IDroppableRowProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className='droppableRow'>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DroppableRow;","import * as React from 'react';\r\nimport './../styles/Tile.css';\r\n\r\nexport interface IRevisedTileProps {\r\n    color: string\r\n}\r\n\r\nclass RevisedTile extends React.Component<IRevisedTileProps, object> {\r\n    constructor(props: IRevisedTileProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const style: React.CSSProperties = { backgroundColor: this.props.color };\r\n\r\n        return (\r\n            <div className='tile' style={ style } />\r\n        );\r\n    }\r\n}\r\n\r\nexport default RevisedTile;","import * as React from 'react';\r\nimport DroppableRow from './DroppableRow';\r\nimport Item from './Item';\r\nimport RevisedTile from './RevisedTile';\r\n\r\nimport {\r\n    DragDropContext,\r\n    Draggable,\r\n    DraggableLocation,\r\n    DraggableProvided,\r\n    DraggableStateSnapshot,\r\n    Droppable,\r\n    DroppableProvided,\r\n    DroppableStateSnapshot,\r\n    DropResult } from 'react-beautiful-dnd';\r\n\r\nexport const ROW1 = '1';\r\nexport const ROW2 = '2';\r\n\r\n// key is what row they start out in, value is the item itself\r\nexport interface IHorizontalPageProps {\r\n    initialItems: Map<string, Item[]>\r\n}\r\n\r\nexport interface IHorizontalPageState {\r\n    itemsInRow1: Item[],\r\n    itemsInRow2: Item[]\r\n}\r\n\r\nexport interface IMoveResult {\r\n    itemsInRow1: Item[],\r\n    itemsInRow2: Item[]\r\n}\r\n\r\nclass HorizontalPage extends React.Component<IHorizontalPageProps, IHorizontalPageState> {\r\n    constructor(props: IHorizontalPageProps) {\r\n        super(props);\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.reorder = this.reorder.bind(this);\r\n\r\n        let itemsToPutInRow1: Item[] = [];\r\n        let itemsToPutInRow2: Item[] = [];\r\n        this.props.initialItems.forEach((items, key) => {\r\n            if (key === ROW1) {\r\n                itemsToPutInRow1 = items;\r\n            } else if (key === ROW2) {\r\n                itemsToPutInRow2 = items;\r\n            } else {\r\n                console.log('An item in initialItems was in neither row 1 nor row 2.');\r\n            }\r\n        });\r\n        this.state = { itemsInRow1: itemsToPutInRow1, itemsInRow2: itemsToPutInRow2 };\r\n    }\r\n\r\n    public render() {\r\n        const horizontalStyling: React.CSSProperties = { display: 'flex', flexDirection: 'column' };\r\n\r\n        return(\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <div style={horizontalStyling}>\r\n                    <Droppable droppableId={ROW1} direction='horizontal' isCombineEnabled={true}>\r\n                        {(providedDroppable: DroppableProvided, snapshotDroppable: DroppableStateSnapshot) => (\r\n                            <div \r\n                            ref={providedDroppable.innerRef}\r\n                            {...providedDroppable.droppableProps}>\r\n                                <DroppableRow>\r\n                                    {this.state.itemsInRow1.map((item, index) => (\r\n                                        <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                                            {(providedDraggable: DraggableProvided, snapshotDraggable: DraggableStateSnapshot) => (\r\n                                                <div>\r\n                                                    <div ref={providedDraggable.innerRef}\r\n                                                    {...providedDraggable.draggableProps}\r\n                                                    {...providedDraggable.dragHandleProps}>\r\n                                                        <RevisedTile color={item.content} />\r\n                                                    </div>\r\n                                                    {providedDraggable.placeholder}\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                </DroppableRow>\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                    <Droppable droppableId={ROW2} direction='horizontal' isCombineEnabled={true}>\r\n                        {(providedDroppable: DroppableProvided, snapshotDroppable: DroppableStateSnapshot) => (\r\n                            <div \r\n                            ref={providedDroppable.innerRef}\r\n                            {...providedDroppable.droppableProps}>\r\n                                <DroppableRow>\r\n                                    {this.state.itemsInRow2.map((item, index) => (\r\n                                        <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                                            {(providedDraggable: DraggableProvided, snapshotDraggable: DraggableStateSnapshot) => (\r\n                                                <div>\r\n                                                    <div ref={providedDraggable.innerRef}\r\n                                                    {...providedDraggable.draggableProps}\r\n                                                    {...providedDraggable.dragHandleProps}>\r\n                                                        <RevisedTile color={item.content} />\r\n                                                    </div>\r\n                                                    {providedDraggable.placeholder}\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                </DroppableRow>\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </DragDropContext>\r\n\r\n        )\r\n    }\r\n\r\n    public onDragEnd(result: DropResult): void {\r\n        const { source, destination } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = this.reorder(this.getList(source.droppableId), source.index, destination.index);\r\n            let state: IHorizontalPageState = {...this.state};\r\n\r\n            if (source.droppableId === ROW1) {\r\n                state = {...this.state, itemsInRow1: items};\r\n            } else if (source.droppableId === ROW2) {\r\n                state = {...this.state, itemsInRow2: items};\r\n            }\r\n\r\n            this.setState(state);\r\n        } else {\r\n            const resultFromMove: IMoveResult = this.move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            this.setState({\r\n                itemsInRow1: resultFromMove.itemsInRow1,\r\n                itemsInRow2: resultFromMove.itemsInRow2\r\n            })\r\n        }\r\n    }\r\n\r\n    private move(source: Item[], destination: Item[], droppableSource: DraggableLocation, droppableDestination: DraggableLocation) {\r\n        const sourceClone = [...source];\r\n        const destinationClone = [...destination];\r\n        const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n        destinationClone.splice(droppableDestination.index, 0, removed);\r\n\r\n        let result = {};\r\n        if (droppableSource.droppableId === ROW1) {\r\n            result = { itemsInRow1: sourceClone, itemsInRow2: destinationClone};\r\n        } else if (droppableSource.droppableId === ROW2) {\r\n            result = { itemsInRow1: destinationClone, itemsInRow2: sourceClone }\r\n        }\r\n\r\n        return result as IMoveResult;\r\n    }\r\n\r\n    private reorder(list: Item[], startIndex: number, endIndex: number) {\r\n        const result = [...list];\r\n        const [removed] = result.splice(startIndex, 1);\r\n        result.splice(endIndex, 0, removed);\r\n\r\n        return result;\r\n    }\r\n\r\n    private getList(droppableId: string) {\r\n        if (droppableId === ROW1) {\r\n            return this.state.itemsInRow1;\r\n        } else {\r\n            return this.state.itemsInRow2;\r\n        }\r\n    }\r\n}\r\n\r\nexport default HorizontalPage;","import * as React from 'react';\r\nimport './../styles/DroppableContainer.css';\r\n\r\nexport interface IDroppableContainerProps {\r\n    key: number;\r\n    position: number;\r\n    grey?: boolean;\r\n    children?: any;\r\n}\r\n\r\nclass DroppableContainer extends React.Component<IDroppableContainerProps, object> {\r\n    constructor(props: IDroppableContainerProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div\r\n            className={'droppableContainer' + (this.props.grey ? ' grey' : '')}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DroppableContainer;","import * as React from 'react';\r\nimport './../styles/Tile.css';\r\n\r\nexport interface ITileProps {\r\n    id: string;\r\n    index: number;\r\n    initialPosition: number;\r\n    selected?: boolean;\r\n}\r\n\r\ninterface ITileState {\r\n    currentPosition: number;\r\n}\r\n\r\nclass Tile extends React.Component<ITileProps, ITileState> {\r\n    constructor(props: ITileProps) {\r\n        super(props);\r\n\r\n        this.state = { currentPosition: props.initialPosition }\r\n    }\r\n\r\n    public render() {\r\n        const style: React.CSSProperties = {\r\n        };\r\n\r\n        return (\r\n            <div className='tile'\r\n            style={ style }\r\n            id={ this.props.id } />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tile;","import * as React from 'react';\r\nimport { DragDropContext, Draggable, DraggableProvided, Droppable, DroppableProvided, DropResult } from 'react-beautiful-dnd';\r\n\r\nimport './../styles/Page.css';\r\nimport DroppableContainer from './DroppableContainer';\r\nimport Tile from './Tile';\r\n\r\nexport const WIDTH = 3;\r\nexport const HEIGHT = 3;\r\n\r\nexport interface IPageProps {\r\n    initialTiles: Map<number, Tile>;\r\n}\r\n\r\ninterface IPageState {\r\n    currentTiles: Map<number, Tile>;\r\n    layout: JSX.Element[][];\r\n    selectedTileKey: string | undefined;\r\n    tilePositions: Map<string, number>;\r\n}\r\n\r\nclass Page extends React.Component<IPageProps, IPageState> {\r\n    constructor(props: IPageProps) {\r\n        super(props);\r\n\r\n        const tilePositions: Map<string, number> = this.getTilePositions(this.props.initialTiles);\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n\r\n        this.state = {\r\n            currentTiles: this.props.initialTiles,\r\n            layout: [],\r\n            selectedTileKey: undefined,\r\n            tilePositions\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <div className='page'>\r\n                    {this.state.layout.map((row, i) =>\r\n                        <div key={i}>{row}</div>)}\r\n                </div>\r\n            </DragDropContext>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.updateLayout();\r\n    }\r\n\r\n    public onDragEnd(result: DropResult) {\r\n        if (!result.destination || result.destination.droppableId === '') {\r\n            console.log('There was no destination.');\r\n            return;\r\n        }\r\n\r\n        if (result.destination.droppableId === result.source.droppableId) {\r\n            return;\r\n        }\r\n\r\n        console.log('Source: ', result.source, ', Destination: ', result.destination);\r\n        this.moveTile(Number(result.source.droppableId), Number(result.destination.droppableId));\r\n        console.log('moveTile() finished.');\r\n    }\r\n\r\n    private moveTile(oldPosition: number, newPosition: number) {\r\n        const tile = this.state.currentTiles.get(oldPosition);\r\n\r\n        console.log('Old position: ', oldPosition, ', New Position: ', newPosition);\r\n\r\n        if (tile && this.state.currentTiles.delete(oldPosition)) {\r\n            const displacedTile = this.state.currentTiles.get(newPosition);\r\n            if (displacedTile)\r\n            {\r\n                let displacedPosition = newPosition + 1;\r\n                if (displacedPosition === WIDTH * HEIGHT)\r\n                {\r\n                    displacedPosition = 0;\r\n                }\r\n                this.state.currentTiles.set(displacedPosition, displacedTile);\r\n            }\r\n            this.state.currentTiles.set(newPosition, tile);\r\n            this.setState({selectedTileKey: undefined})\r\n            this.updateTilePositionsMap();\r\n            this.updateLayout();\r\n        }   \r\n    }\r\n\r\n    private updateLayout() {\r\n        const arr: JSX.Element[][] = [];\r\n\r\n        for (let x = 0; x < WIDTH; x++) {\r\n            const row: JSX.Element[] = [];\r\n\r\n            for (let y = 0; y < HEIGHT; y++) {\r\n                const grey: boolean = (y+x) % 2 === 0;\r\n                const i = y + x*HEIGHT;\r\n                const tile = this.state.currentTiles.get(i);\r\n\r\n                if (tile) {\r\n                    row.push(\r\n                        <div key={i}>\r\n                            <Droppable droppableId={String(i)}>\r\n                                {(providedDroppable: DroppableProvided) => (\r\n                                <div ref={providedDroppable.innerRef}\r\n                                {...providedDroppable.droppableProps}>\r\n                                    <DroppableContainer\r\n                                    key={i}\r\n                                    position={i}\r\n                                    grey={grey}>\r\n                                        <Draggable draggableId={String(tile.props.id)} index={0}>\r\n                                            {(providedDraggable: DraggableProvided) => (\r\n                                                <div\r\n                                                ref={providedDraggable.innerRef}\r\n                                                {...providedDraggable.draggableProps}\r\n                                                {...providedDraggable.dragHandleProps}>\r\n                                                    <Tile\r\n                                                    id={tile.props.id}\r\n                                                    initialPosition={i}\r\n                                                    index={0} />\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    </DroppableContainer>\r\n                                </div>\r\n                            )}\r\n                            </Droppable>\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    row.push(\r\n                        <div key={i}>\r\n                            <Droppable droppableId={String(i)}>\r\n                                {(providedDroppable: DroppableProvided) => (\r\n                                    <div ref={providedDroppable.innerRef}\r\n                                    {...providedDroppable.droppableProps}>\r\n                                        <DroppableContainer\r\n                                        key={i}\r\n                                        position={i}\r\n                                        grey={grey} />\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n            arr.push(row);\r\n        }\r\n        this.setState({ layout: arr });\r\n    }\r\n\r\n    private updateTilePositionsMap() {\r\n        const tilePositions: Map<string, number> = this.getTilePositions(this.state.currentTiles);\r\n        this.setState({tilePositions});\r\n    }\r\n\r\n    private getTilePositions(positionToTileMap: Map<number, Tile>) {\r\n        const tilePositions: Map<string, number> = new Map();\r\n        positionToTileMap.forEach((tile: Tile, position: number) => {\r\n            tilePositions.set(tile.props.id, position);\r\n        })\r\n        return tilePositions;\r\n    }\r\n}\r\n\r\nexport default Page;","import * as React from 'react';\r\nimport HorizontalPage, { ROW1, ROW2 } from './HorizontalPage';\r\nimport Item from './Item';\r\nimport Page from './Page';\r\nimport Tile from './Tile';\r\n\r\nclass App extends React.Component {\r\n  public render() {\r\n    const tiles: Map<number, Tile> = new Map();\r\n    tiles.set(1, new Tile({id: 'blue', initialPosition: 1, index: 0}));\r\n    tiles.set(0, new Tile({id: 'red', initialPosition: 0, index: 0}));\r\n\r\n    const itemsInRow1: Item[] = [];\r\n    itemsInRow1.push({id: 'a', content: 'lightblue'} as Item);\r\n    itemsInRow1.push({id: 'b', content: 'pink'} as Item);\r\n    itemsInRow1.push({id: 'c', content: 'orange'} as Item);\r\n\r\n    const itemsInRow2: Item[] = [];\r\n    itemsInRow2.push({id: 'x', content: 'yellow'} as Item);\r\n    itemsInRow2.push({id: 'y', content: 'purple'} as Item);\r\n    itemsInRow2.push({id: 'z', content: 'green'} as Item);\r\n\r\n    const items: Map<string, Item[]> = new Map();\r\n    items.set(ROW1, itemsInRow1);\r\n    items.set(ROW2, itemsInRow2);\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <p style={{maxWidth: '600px'}}>The below example demonstrates drag-and-drop. Because this includes the patched version of react-beautiful-dnd, touch works in Edge on it. However, I'm still working on trying to get touch narrator to work--right now, if you activate a drag with touch, it won't recognize the drag if you continue with touch, however, it will recognize the drag if you continue with mouse. Very frustrating and strange.</p>\r\n        <p>Here's how to activate touch drag (though it doesn't work):</p>\r\n        <ol>\r\n          <li>Turn on Narrator</li>\r\n          <li>Use touch explore to select a block (basically, touch one of the blocks until it's selected)</li>\r\n          <li>With another finger, double-tap outside of the block itself. You should hear a clicking sound, and if developer tools is open, a 'click' event should be logged.</li>\r\n          <li>Try to move your finger. Observe that it doesn't drag, and instead just selects other blocks if you drag over them.</li>\r\n          <li>Now, try moving your mouse. Observe that a drag is in process.</li>\r\n        </ol>\r\n        <HorizontalPage initialItems={items} />\r\n        \r\n        <div style={{height: '50px'}} />\r\n\r\n        <p style={{maxWidth: '600px'}}>The below example was my initial attempt at getting an interface to work. It's not really what we're looking for, but it demonstrates how to deal with the edge case of moving a displaced tile to another area of the grid (in this case, the lower right corner to the upper left corner) when another tile is moved in its place.</p>\r\n        <Page initialTiles={tiles} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './styles/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}